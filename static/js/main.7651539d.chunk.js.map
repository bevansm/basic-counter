{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","styles","fontSize","fontWeight","handleIncrement","bind","assertThisInitialized","handleClear","handleDelete","_this2","react_default","a","createElement","className","getBadgeClasses","formatValue","onClick","formatClear","onClear","onDelete","id","setState","onIncrement","classes","Component","Counters","counters","sumOfValues","nextId","counterId","console","log","filter","c","clearedValue","findIndexOfInCounters","i","addCounter","removeBottomCounter","clearAll","myCounters","j","length","map","counter","components_counter","key","_this3","formatRemove","isEmpty","btn","concat","toConsumableArray","undefined","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7651539d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleIncrement = this.handleIncrement.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n\r\n  state = {\r\n    value: this.props.value\r\n  };\r\n\r\n  styles = {\r\n    fontSize: 25,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatValue()}</span>\r\n        <button\r\n          onClick={() => this.handleIncrement()}\r\n          className=\"btn btn-info btn-sm m-2\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button onClick={this.handleClear} className={this.formatClear()}>\r\n          Clear\r\n        </button>\r\n        <button\r\n          onClick={this.handleDelete}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleDelete() {\r\n    this.props.onClear(this.state.value);\r\n    this.props.onDelete(this.props.id);\r\n  }\r\n\r\n  handleIncrement() {\r\n    this.setState({ value: this.state.value + 1 });\r\n    this.props.onIncrement(this.props.id);\r\n  }\r\n\r\n  handleClear() {\r\n    this.props.onClear(this.state.value, this.state.id);\r\n    this.setState({ value: 0 });\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatClear() {\r\n    let classes = \"btn btn-sm btn-\";\r\n    classes += this.state.value === 0 ? \"secondary\" : \"info\";\r\n    return classes;\r\n  }\r\n\r\n  formatValue() {\r\n    const { value } = this.state;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 0, value: 4 },\r\n      { id: 1, value: 0 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 }\r\n    ],\r\n    sumOfValues: 4,\r\n    nextId: 4\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.addCounter = this.addCounter.bind(this);\r\n    this.removeBottomCounter = this.removeBottomCounter.bind(this);\r\n    this.clearAll = this.clearAll.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return this.myCounters();\r\n  }\r\n\r\n  handleDelete = counterId => {\r\n    console.log(\"Deletin'\", counterId);\r\n    const counters = this.state.counters.filter(c => c.id !== counterId);\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleClear = (clearedValue, counterId) => {\r\n    console.log(\"before clear\", this.state.sumOfValues);\r\n    let counters = this.state.counters;\r\n    let i = this.findIndexOfInCounters(counterId);\r\n    counters[i].value = 0;\r\n    let sumOfValues = this.state.sumOfValues - clearedValue;\r\n    this.setState({ counters, sumOfValues });\r\n    console.log(\"new sum\", sumOfValues);\r\n  };\r\n\r\n  handleIncrement = counterId => {\r\n    let counters = this.state.counters;\r\n    let i = this.findIndexOfInCounters(counterId);\r\n    counters[i].value = counters[i].value + 1;\r\n    this.setState({ counters, sumOfValues: this.state.sumOfValues + 1 });\r\n    console.log(\"sumOfValues\", this.state.sumOfValues);\r\n  };\r\n\r\n  findIndexOfInCounters(counterId) {\r\n    let counters = this.state.counters;\r\n    let i = 0;\r\n    for (let j = 0; j < counters.length; j++) {\r\n      if (counters[j].id === counterId) {\r\n        i = j;\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  }\r\n\r\n  moshCountersChildrenProps() {\r\n    return (\r\n      <div>\r\n        {this.state.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.handleDelete}\r\n            onClear={this.handleClear}\r\n            onIncrement={this.handleIncrement}\r\n            value={counter.value}\r\n            id={counter.id}\r\n          >\r\n            <h4>Counter #{counter.id}</h4>\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  myCounters() {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          Total Counters: {this.state.counters.length}, Total Count:{\" \"}\r\n          {this.state.sumOfValues}\r\n        </h1>\r\n        <h2>\r\n          <button\r\n            className=\"btn btn-primary btn-sm m-1\"\r\n            onClick={this.addCounter}\r\n          >\r\n            Add Counter\r\n          </button>\r\n          <button\r\n            className={this.formatRemove()}\r\n            onClick={this.removeBottomCounter}\r\n          >\r\n            Remove Bottom Counter\r\n          </button>\r\n          <button className={this.formatRemove()} onClick={this.clearAll}>\r\n            Clear All\r\n          </button>\r\n        </h2>\r\n        <div>\r\n          {this.state.counters.map(counter => (\r\n            <Counter\r\n              key={counter.id}\r\n              onDelete={this.handleDelete}\r\n              onClear={this.handleClear}\r\n              onIncrement={this.handleIncrement}\r\n              value={counter.value}\r\n              id={counter.id}\r\n            >\r\n              <h4>Counter #{counter.id}</h4>\r\n            </Counter>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  counterSize() {\r\n    if (this.isEmpty()) {\r\n      return 0;\r\n    }\r\n    return this.state.counters.length;\r\n  }\r\n\r\n  formatRemove() {\r\n    let btn = \"m-1 btn btn-sm btn-\";\r\n    if (this.isEmpty()) {\r\n      return btn + \"secondary\";\r\n    }\r\n    return btn + \"primary\";\r\n  }\r\n\r\n  addCounter() {\r\n    this.setState({\r\n      counters: [...this.state.counters, { id: this.state.nextId, value: 0 }],\r\n      nextId: this.state.nextId + 1\r\n    });\r\n  }\r\n\r\n  removeBottomCounter() {\r\n    if (!this.isEmpty()) {\r\n      const counters = this.state.counters;\r\n      let i = counters.length - 1;\r\n      let id = counters[i].id;\r\n      let value = counters[i].value;\r\n      this.handleClear(value, id);\r\n      this.handleDelete(id);\r\n    }\r\n  }\r\n\r\n  clearAll() {\r\n    this.setState({\r\n      counters: [],\r\n      sumOfValues: 0,\r\n      nextId: 0\r\n    });\r\n  }\r\n\r\n  isEmpty() {\r\n    const counters = this.state.counters;\r\n    return counters === undefined || counters.length === 0;\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}